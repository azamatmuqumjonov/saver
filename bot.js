const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
const path = require('path');
const env = require('dotenv');

env.config();

const TOKEN = process.env.BOT_TOKEN;
const bot = new TelegramBot(TOKEN, { polling: true });

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');

const queue = [];
let isProcessing = false;

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const isPrivate = msg.chat.type === 'private';
  const text = isPrivate
    ? 'üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok.'
    : 'üëã –Ø –≥–æ—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ TikTok –ø—Ä—è–º–æ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!';
  bot.sendMessage(chatId, text);
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || !text.startsWith('http')) return;

  const userRequest = {
    chatId,
    text,
    username: msg.from.username || msg.from.first_name,
    replyToMessageId: msg.message_id,
  };
  queue.push(userRequest);

  const position = queue.length;
  console.log(`–ó–∞–ø—Ä–æ—Å –æ—Ç @${userRequest.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å [${position}]`);

  if (!isProcessing) {
    processQueue();
  }
});

async function processQueue() {
  if (queue.length === 0) {
    isProcessing = false;
    console.log('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞. –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...');
    return;
  }

  isProcessing = true;
  const { chatId, text, username, replyToMessageId } = queue.shift();
  const currentQueueSize = queue.length;

  console.log(`–ù–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è @${username} (–æ—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: ${currentQueueSize})`);
  console.log(`–°—Å—ã–ª–∫–∞: ${text}`);

  try {
    const apiUrl = `https://tikwm.com/api/?url=${encodeURIComponent(text)}`;
    const res = await axios.get(apiUrl);

    if (!res.data || res.data.code !== 0 || !res.data.data) {
      console.error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', res.data);
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞.', {
        reply_to_message_id: replyToMessageId,
      });
      return processQueue();
    }

    const data = res.data.data;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if (data.images && data.images.length > 0) {
      const images = data.images.slice(0, 10);
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${data.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ –∏–∑ ${images.length} —Ñ–æ—Ç–æ...`);

      const mediaGroup = images.map((url) => ({
        type: 'photo',
        media: url,
      }));

      try {
        await bot.sendMediaGroup(chatId, mediaGroup, {
          reply_to_message_id: replyToMessageId,
        });
        console.log(`–ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @${username}`);
      } catch (mediaErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞:', mediaErr.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.', {
          reply_to_message_id: replyToMessageId,
        });
      }

      return processQueue();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    const videoUrl = data.play;
    if (!videoUrl) {
      console.warn('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ API.');
      await bot.sendMessage(chatId, '‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', {
        reply_to_message_id: replyToMessageId,
      });
      return processQueue();
    }

    const response = await axios.get(videoUrl, { responseType: 'stream' });
    const filePath = path.join(__dirname, `video_${Date.now()}.mp4`);
    const writer = fs.createWriteStream(filePath);

    response.data.pipe(writer);

    writer.on('finish', async () => {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ @${username}`);
      try {
        await bot.sendVideo(chatId, filePath, {
          reply_to_message_id: replyToMessageId,
        });
        console.log(`–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @${username}`);
      } catch (sendErr) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', sendErr.message);
        await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.', {
          reply_to_message_id: replyToMessageId,
        });
      } finally {
        fs.unlinkSync(filePath);
        console.log('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.');
        processQueue();
      }
    });

    writer.on('error', async (writeErr) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', writeErr.message);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ.', {
        reply_to_message_id: replyToMessageId,
      });
      processQueue();
    });

  } catch (err) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞:', err.message);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.', {
      reply_to_message_id: replyToMessageId,
    });
    processQueue();
  }
}
